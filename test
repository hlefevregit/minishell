void	init_prompt(char **envp)
{
	t_mini mini;

	mini = init_mini(envp);
	while (1)
	{
		mini.cmd = readline(GREEN"MINISHELL DRUCKER A LA RESCOUSSE > "RESET);
		printf("cmd = %s\n", mini.cmd);
		if (!mini.cmd)
			handle_ctrl_d();
		add_history(mini.cmd);
		if (mini.cmd[0] != 0)
			if (get_lex_of_cmd(mini) == -1)
				break ;
		// free_struct(mini);
		if (mini.exit >= 0)
		{
			rl_clear_history();
			exit(g_global.exit_status % 256);
		}
	}
}
void	ft_child_proc(char **av, t_mini mini)
{
	pid_t	pid;
	int		fd[2];
	int		i;
	int		prev_fd;
	int		status;
	char	**last_cmd;

	i = 0;
	prev_fd = STDIN_FILENO;
	while (i < mini.num_cmd - 1)
	{
		printf("av[%d] = %s\n", i, av[i]);
		if (pipe(fd) == -1)
		{
			perror("Error pipe \n");
			exit(EXIT_FAILURE);
		}
		pid = fork();
		if (pid == -1)
		{
			perror("Error fork \n");
			exit(EXIT_FAILURE);
		}
		if (pid == 0)
		{
			printf("child process\n");
			if (prev_fd != STDIN_FILENO)
			{
				dup2(prev_fd, STDIN_FILENO);
				close(prev_fd);
			}
			close(fd[0]);
			dup2(fd[1], STDOUT_FILENO);
			close(fd[1]);
			if (ft_execute(ft_split(av[i], 32), mini, \
				STDIN_FILENO, STDOUT_FILENO) == -1)
				exit(127);
			exit(0);
		}
		else
		{
			printf("parent process\n");
			waitpid(pid, &status, 0);
			if (WIFEXITED(status))
				g_global.exit_status = WEXITSTATUS(status);
			close(fd[1]);
			if (prev_fd != STDIN_FILENO)
				close(prev_fd);
			prev_fd = fd[0];
		}	
		i++;
	}
	last_cmd = ft_split(av[i], 32);
	if (ft_is_builtin(last_cmd[0]) == 1)
		ft_exec_builtin(last_cmd, mini);
	else
	{
		pid = fork();
		if (pid == -1)
		{
			perror("Error fork \n");
			exit(EXIT_FAILURE);
		}
		if (pid == 0)
		{
			printf("last child process\n");
			if (prev_fd != STDIN_FILENO)
			{
				dup2(prev_fd, STDIN_FILENO);
				close(prev_fd);
			}
			if (ft_execute(last_cmd, mini, STDIN_FILENO, STDOUT_FILENO) == -1)
				exit(127);
			exit(0);
		}
		else
		{
			waitpid(pid, &status, 0);
			if (WIFEXITED(status))
				g_global.exit_status = WEXITSTATUS(status);
			close(prev_fd);
			printf("last parent process\n");
		}
	}
}

int	ft_exec_pipex(t_mini mini)
{
	int	i;

	i = 0;
	ft_child_proc(mini.isolate_cmd, mini);
	printf("exit_status = %d\n", g_global.exit_status);
	ft_putstr_fd(GREEN"Done\n"RESET, 0);
	return (0);
}
int	try_execve(char **cmd, t_mini mini)
{
	char	*path;
	int		status;

	path = find_path(cmd[0], mini.envp);
	// status = 0;
	if (path == NULL)
	{
		ft_putstr_fd("minishell: command not found: ", STDERR_FILENO);
		ft_putendl_fd(cmd[0], 2);
		g_global.exit_status = 127;
		return (-1);
	}
	pid_t	pid;
	pid = fork();
	if (pid == 0)
	{
		if (execve(path, cmd, mini.envp) == -1)
		{
			ft_putstr_fd("minishell: command not found: ", STDERR_FILENO);
			ft_putendl_fd(cmd[0], 2);
			exit(127);
		}
	}	
	else
	{
		waitpid(pid, &status, 0);
		if (WIFEXITED(status))
			g_global.exit_status = WEXITSTATUS(status);
	}
	free(path);
	return (0);
	
}

int	ft_is_builtin(char *cmd)
{
	if (ft_strncmp(cmd, "echo", 5) == 0)
		return (1);
	else if (ft_strncmp(cmd, "unset", 6) == 0)
		return (1);
	else if (ft_strncmp(cmd, "cd", 3) == 0)
		return (1);
	else if (ft_strncmp(cmd, "export", 7) == 0)
		return (1);
	else if (ft_strncmp(cmd, "pwd", 4) == 0)
		return (1);
	else if (ft_strncmp(cmd, "env", 4) == 0)
		return (1);
	else if (ft_strncmp(cmd, "exit", 5) == 0)
		return (1);
	return (0);
}

void	ft_exec_builtin(char **cmd, t_mini mini)
{
	if (ft_strcmp(cmd[0], "cd") == 0)
		ft_cd(cmd, mini);
	else if (ft_strcmp(cmd[0], "echo") == 0)
		ft_echo(cmd, mini);
	else if (ft_strcmp(cmd[0], "pwd") == 0)
		ft_pwd(mini);
	else if (ft_strcmp(cmd[0], "unset") == 0)
		ft_unset(cmd, mini);
	else if (ft_strcmp(cmd[0], "export") == 0)
		ft_export(cmd, mini);
	else if (ft_strcmp(cmd[0], "env") == 0)
		ft_env(cmd, mini);
	else if (ft_strcmp(cmd[0], "exit") == 0)
	{
		g_global.exit_status = ft_exit(cmd, mini);
		exit (g_global.exit_status % 256);
	}
}

int	ft_execute(char **arg, t_mini mini, int in_fd, int out_fd)
{
	pid_t	pid;
	int		status;

	if (!arg || !arg[0])
		return (-1);
	handle_redirections(arg);
	
	if (ft_is_builtin(arg[0]) == 1)
	{
		if (in_fd != STDIN_FILENO)
		{
			dup2(in_fd, STDIN_FILENO);
			close(in_fd);
		}
		if (out_fd != STDOUT_FILENO)
		{
			dup2(out_fd, STDOUT_FILENO);
			close(out_fd);
		}
		ft_exec_builtin(arg, mini);
		return (0);
	}
	else
	{
		pid = fork();
		if (pid < 0)
		{
			perror("fork");
			return (-1);
		}
		if (pid == 0)
		{
			printf("arg[0] = %s\n", arg[0]);
			if (in_fd != STDIN_FILENO)
			{
				dup2(in_fd, STDIN_FILENO);
				close(in_fd);
			}
			if (out_fd != STDOUT_FILENO)
			{
				dup2(out_fd, STDOUT_FILENO);
				close(out_fd);
			}
			if (try_execve(arg, mini) == 0)
				if (g_global.exit_status == 127)
					exit(127);
			exit(0);
		}
		else
		{
			waitpid(pid, &status, 0);
			if (WIFEXITED(status))
				g_global.exit_status = WEXITSTATUS(status);
		}
	}
	if (g_global.exit_status == 127)
		return (-1);
	return (0);
}
